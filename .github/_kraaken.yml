name: Kraaken API CI/CD
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]
    steps:
      - name: Including Code
        uses: actions/checkout@v2
      - name: Build docker images
        run: docker build -t kraken/api .
      - name: Run Kraaken API
        run: docker run -p 7001:7001 -d kraken/api
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  tests:
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]
    steps:
      - uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306 # Optional, default value is 3306. The port of host
          container port: 3306 # Optional, default value is 3306. The port of container
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          mysql database: 'kraaken' # Optional, default value is "test". The specified database which will be create
          mysql root password: '1234' # Required if "mysql user" is empty, default is empty. The root superuser password
          mysql user: 'root' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: '1234' # Required if "mysql user" exists. The password for the "mysql user"
      - name: Including Code
        uses: actions/checkout@v2
      - name: Build docker images
        run: docker build -t kraken/api .
      - name: Run Kraaken API
        run: docker run -p 7001:7001 -d kraken/api
      - name: Building dependencies
        run: npm install --include=dev
      - name: linking aliases
        run: npm run link
      - name: adding prisma
        run: npm install -g prisma
      - name: pushing db
        run: prisma db push
      - name: generating DB client
        run: prisma generate
      - name: Run Test
        run: npm run test

  deploy_to_registry_dev:
    needs:
      - tests
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]
    steps:
      - name: Including Code
        uses: actions/checkout@v2
      - name: connection docker
        run: echo @Nakmuay972 | docker login -u "kraaken" --password-stdin
      - name: building docker
        run: docker-compose up -d
      - name: check image here
        run: docker ps
      - name: create tag #foo
        run: docker tag api_web kraaken/api:dev
      - name: push image
        run: docker push kraaken/api:dev

  deploy_to_registry:
    needs:
      - tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]
    steps:
      - name: Including Code
        uses: actions/checkout@v2
      - name: connection docker
        run: echo @Nakmuay972 | docker login -u "kraaken" --password-stdin
      - name: building docker
        run: docker-compose up -d
      - name: check image here
        run: docker ps
      - name: create tag #foo
        run: docker tag api_web kraaken/api:latest
      - name: push image
        run: docker push kraaken/api:latest

  deploy_to_production:
    needs:
      - tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]
    steps:
      - name: Including Code
        uses: actions/checkout@v2
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ./deploy.key
          sudo chmod 600 ./deploy.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
      - name: Install PM2 with yarn
        run: yarn global add pm2
      - name: Deploy to server
        run: pm2 deploy ecosystem.config.js production