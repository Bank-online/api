const Sentry = require('$sentry');
const db = require('$db');
const service_email = require("$services/Mail/index");
const Validator = require("$class/Validator");
const JWT = require('jsonwebtoken')
const Kraaken = require('$class/Kraaken');
const yup = require('yup')
const {sendNotification} = require("../../services/system/notification/socket/connection");

/**
 * @generator controller generated by kraaken-cli
 * @param req
 * @param res
 * @description NotificationController
 * @type {Express}
 */
const ReadNotificationController = async (req, res) => {

    try {
        const { uuid } = req.params;

        const schema = yup.object().shape({
            uuid: yup.string().uuid().required()
        })

        if (! await schema.validate({ uuid: uuid})){
            return res.status(400).json({
                message: 'Bad Request',
                errors: schema.errors
            })
        }

        const notification = await db.notifications.findUnique({
            where: {
                uuid: uuid
            },
            include: {
                user: true
            }
        })

        if (notification){
            const notification = await db.notifications.update({
                where: {
                    uuid: uuid
                },
                data: {
                    isRead: true
                }
            });

            const user = await db.user.findUnique({
                where: {
                    uuid: notification.user_uuid
                }
            })

            if(user && user.socketId) sendNotification(true, 'Notification has been read', user.socketId)

            return res.status(200).json(notification)
        }

        return res.status(500).json({
            error: "",
            message: "Can't read notification"
        })
    } catch (err){
        /**
         * @type {Kraaken|prisma}
         * @description Send error to kraaken
         */
        const kraaken = new Kraaken()
        await kraaken.captureError(err);

        /**
         * @description returning an error from request
         */
        return res.status(500).send({
            error: err.message
        })
    }

}

/**
 * @description Exporting only function, because they will be auto discovered.
 * @type {function}
 */
module.exports = ReadNotificationController